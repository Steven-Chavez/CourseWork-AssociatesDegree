package chavezP7;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JLabel;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Displays components that allows the user to manipulate the polygon
 * 
 * @author Steven Chavez <schavez256@yahoo.com>
 * File: ControlPanel.java
 * Program 7: Polygons
 * CIS 2235
 */
public class ControlPanel extends javax.swing.JPanel {
    
    PolygonFrame frame;
    private JLabel lblSlider = new JLabel();
    private JSlider slider = new JSlider();
    private JSpinner spinner = new JSpinner();
    private JCheckBox chbxCircle = new JCheckBox("Add Circle");
    private JButton btnColor = new JButton("Color");
    
    public ControlPanel(PolygonFrame frame) 
    {
        this.frame = frame;
        
        initComponents();
        
        TitledBorder t1 = BorderFactory.createTitledBorder("Control Panel");
        setBorder(t1);
	setLayout( new GridLayout( 5, 1) ); 
        
        // Set up components
        slider.setMinimum(1);
        slider.setMaximum(10); 
        slider.setMinorTickSpacing(1);
        slider.setPaintTicks(true);
        slider.setValue(1);
     
        // add the components to the panel
        add(lblSlider);
        add(slider);
        add(spinner);
        add(chbxCircle);
        add(btnColor);
        
        // Create and register anonymous class listeners
        slider.addChangeListener(new SliderChangeListener());
        spinner.addChangeListener(new SpinnerChangeListener());
        chbxCircle.addActionListener(new ChbxCircleActionListener());
        btnColor.addActionListener(new BtnColorActionListener());
    }
    
    /**
     * Sets the value for the slider
     * 
     * @param value slider amount of radius 
     */
    public void setSlider(int value)
    {
        slider.setValue(value);
        lblSlider.setText("Radius = " + value);
        
        frame.radiusSet(value);
    }
    
    /**
     * Sets the value for the spinner
     * 
     * @param value spinner amount for the number of sides
     */
    public void setSpinner(int value)
    {
        spinner.setValue(value);
        
        frame.numSideSet(value);
    }
    
    /**
     * Sets the value to determine if check box is checked
     * 
     * @param value used to determine if check box is checked 
     */
    public void setCheckBox(boolean value)
    {
        chbxCircle.setSelected(value);
        
        frame.bCircleSet(value);
    }
    
    /**
     * Sets the color value for the polygon
     * 
     * @param color of the polygon
     */
    public void setColor(Color color)
    {
        frame.colorSet(color);
    }
    
    class SliderChangeListener implements ChangeListener
    {
       @Override
        public void stateChanged(ChangeEvent e)
        {
            int value = (int)slider.getValue();
            
            lblSlider.setText("Radius = " + value);
            
            // transfer information to midiator
            frame.radiusSet(value);
        }
    }
    
    class SpinnerChangeListener implements ChangeListener
    {
        @Override
        public void stateChanged(ChangeEvent e) 
        {
            int value = (int)spinner.getValue();
            
            if(value < 3)
            {
               spinner.setValue(3);
               value = (int)spinner.getValue();
            }
            
            // transfer information to midiator
            frame.numSideSet(value);
        }       
    }
    
    class ChbxCircleActionListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e) 
        {
            boolean value;
            
            value = chbxCircle.isSelected();
            
            // transfer information to midiator
            frame.bCircleSet(value);
        }     
    }
    
    class BtnColorActionListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e) 
        {
            Color initialBackground = Color.white;
            Color color = JColorChooser.showDialog(null, "Change Polygon Color",
            initialBackground);
            
            frame.colorSet(color);
        }   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
